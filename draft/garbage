Page 2 
============

```{r}
datatable(df, caption = 'Fuck')
```

Column {data-width=700}
-----------------------------------------------------------------------
```{r}
selectedData <- reactive({iris[, c(input$xcol, input$ycol)]})
clusters <- reactive({kmeans(selectedData(), input$clusters)})

renderPlot({par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(), col= clusters()$cluster, pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex =4, lwd=4)})
```


Column {data-width=150}
-----------------------------------------------------------------------

### Chart B

```{r}
    selectInput('xcol', "Variable X", names(iris))
    selectInput("ycol", "Variable Y", names(iris), selected = names(iris)[[2]])
    numericInput('clusters', 'Number of clusters', 3, min = 1, max = 9)
```

### Chart C

```{r}

```

Page 3
========

Col {data-width = 50}
-----------------------

### Options 
```{r}
checkboxGroupInput("variable", 'variables to show:', as.vector(names(df)), selected = names(df)[1])
op <- reactive({df[, c(input$variable)]})
```

Col
--------------------------------------

### Table
```{r}
renderTable({ req(input$variable)
  df[1:5, input$variable]})
```



### Graph

```{r}
renderPlot({boxplot(op())})

```

Page 4
========

Col {data-width = 500}
-----------------------

### Options 
```{r}
datatable(df, caption = "Mental Health, daily habits and sociodemographics",rownames = T ,filter = 'top', options = list(pageLength = 10))
```


```






# General Table

## Col {data-width = 500}

### Options

```{r}
datatable(df, caption = "Mental Health, daily habits and sociodemographics",rownames = T ,filter = 'top', options = list(pageLength = 10))
```

\`\`\`



NETWORK ANALYSIS

# Net Analysis with symptoms

## Column {data-width="650"}

### Chart A

```{r}

#symp <- df[8:15]
#symp <- chosen_cntry[,8:15]
#zorderdf <- cor(symp)
#qgraph(zorderdf, layout = "spring", groups = list(Depression = 1:4, Healthy_elements = 7:8, Unhealthy_elements = 5:6), color = c("darkgrey", "lightblue", "darkred"), nodeNames = colnames(zorderdf))

renderPlot({req(input$countries)
  ndf <- chosen_cntry()[8:15]
  #ndf <- df[8:15] %>% filter(cntry == input$countries)
  zorderdf <- cor(ndf)
  qgraph(zorderdf, layout = "spring", groups = list(Depression = 1:4, Healthy_elements = 7:8, Unhealthy_elements = 5:6), color = c("darkgrey", "lightblue", "darkred"), nodeNames = colnames(zorderdf))
  })

```

## Column {data-width="350"}

### Chart B

```{r}
selectInput('countries', 'Select the country', unique(df$cntry))

chosen_cntry <- reactive({req(input$countries)
  df %>% filter(cntry == input$countries)})

#ct_by_cntry <- reactiveValues({req(input$countries)
#  df %>% filter(cntry == input$countries) %>%
#  summarise(total = n())})

renderTable({chosen_cntry()})
```

### Total in the sample by country: `r reactive(input$countries)`

```{r}

renderValueBox({
  count_cntry <- df %>% filter(cntry == input$countries) %>%
  summarise(total = n())
  valueBox(value = count_cntry, color = 'green', icon = 'fa-users')})

#valueBox(value = count_cntry, color = 'green', icon = 'fa-users')

#output$countBox<- renderValueBox({val <- ct_by_cntry()$total
#valueBox(value = val, color = 'green', icon = 'fa-users')})

#rlang::(ct_by_cntry())
#reactiveValues(ct_by_cntry())

```

# Net Analysis with all vars

## Column {data-width="700"}

### Network Analysis

```{r}

renderPlot({req(input$countries2)
  ndf2 <- chosen_cntry2()[, c(4:17)]
  #ndf <- df[8:15] %>% filter(cntry == input$countries)
  zorderdf2 <- cor(ndf2)
  qgr <- qgraph(zorderdf2, layout = "spring", groups = list(Sociodem = 1:2, Health_issues = 3:4, Depression = 5:10, Healthy_elements = 13:14, Unhealthy_elements = 11:12), color = c("grey", "red", "darkblue", "darkgreen", "darkred"), nodeNames = colnames(zorderdf2))
  })

#colnames(df2)[4:17]
```

## Column {data-width="50"}

### Selection

```{r}
selectInput('countries2', 'Select the country', unique(df2$cntry))

chosen_cntry2 <- reactive({req(input$countries2)
  df2 %>% filter(cntry == input$countries2)})
```

### Total

```{r}
#renderTable({chosen_cntry2()})
renderValueBox({
  count_cntry2 <- df2 %>% filter(cntry == input$countries2) %>%
  summarise(total = n())
  valueBox(value = count_cntry2, color = 'green', icon = 'fa-users')})
```







colors_pie <- c(
  "Normal or Very Light" ="#2ca02c",  
  "Light" = "#F2CC8F",              
  "Moderate" = "#B2D7EE",            
  "Strong" = "#779ECB",              
  "Extremely Strong" = "#444494"   
)


----------------------------------------------------------------------------------


# Depression and habits

## Column A {.sidebar}

```{r}
renderText({paste("Testing", input$countries_dem_inc)})


renderGauge({
req(input$countries_dem_inc)
tot <- df2 %>% filter(cntry == input$countries_dem_inc) %>% summarise(total = n()) %>% pull(total)
#tot <- renderText({tot})
current <- sum(chosen_cntry_dem_inc()$n)
gauge(value = sum(current / tot) * 100, min = 0, max = (tot/tot)*100, symbol = '%', label = paste('Total:',current))
})
```

------------------------------------------------------------------------

## B {data-width="400"}

```{r}
renderTable({ chosen_cntry_dem_inc()})
```

------------------------------------------------------------------------

## C {data-width="400"}

```{r}
renderPlotly({
  plot_ly(data= chosen_cntry_dem_inc(), type = 'pie', labels = ~dep_proxy, values = ~n) %>%
  layout(legend = list(font = list(size = 10)), width = 600, title = paste("Sample from", input$countries_dem_inc, "given the selected features"))
})

```

# Boxplot

## Col {data-width = 50}

### Options

```{r}
op_df2 <- df2[4:17]
checkboxGroupInput("variable", 'variables to show:', as.vector(names(op_df2)), selected = names(op_df2)[1])
op <- reactive({df2[, c(input$variable)]})

#colnames(df2[3:17])
```

## Col

### Table

```{r}
renderTable({ req(input$variable)
  df2[1:5, input$variable]})
```

### Graph

```{r}
renderPlot({boxplot(op())})

```